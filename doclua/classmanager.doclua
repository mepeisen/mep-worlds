--    Copyright Martin Eisengardt 2018 xworlds.eu
--    
--    This file is part of xwos.
--
--    xwos is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    xwos is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with xwos.  If not, see <http://www.gnu.org/licenses/>.

---------------
-- a class manager for loading classes
-- @module classmanager

---------------
-- plain require a file
-- @function [parent=#classmanager] require
-- @param #string path the path to file
-- @return #any the file result

---------------
-- adds a path to classpath
-- @function [parent=#classmanager] addcp
-- @param ... classpath elements to be added
-- @return #classmanager self for chaining

---------------
-- removes a path from classpath
-- @function [parent=#classmanager] removecp
-- @param ... classpath elements to be removed
-- @return #classmanager self for chaining

---------------
-- Retrieves singleton instance
-- @function [parent=#classmanager] get
-- @param #string name the class name
-- @return #table the object instance

---------------
-- create new class instance
-- @function [parent=#classmanager] new
-- @param #string name the class name
-- @param ... optional constructor arguments
-- @return #table the object instance

---------------
-- load class with given name
-- @function [parent=#classmanager] load
-- @param #string name the class name

---------------
-- load all class within given package
-- @function [parent=#classmanager] loadAll
-- @param #string package the package name

---------------
-- find packages with given prefix
-- @function [parent=#classmanager] findPackages
-- @param #string prefix the package prefix
-- @return #table the found packages (package names in keys)

---------------
-- find classes within package
-- @function [parent=#classmanager] findClasses
-- @param #string package the package name
-- @return #table the found classes (class names in keys)

---------------
-- Checks if given class is defined
-- @function [parent=#classmanager] defined
-- @param #string name the class name

---------------
-- declares a new class
-- @function [parent=#classmanager] class
-- @param #string name the class name
-- @return #clazz the class instance

---------------
-- a local class declaration
-- @type clazz
    
---------------
-- the instance functions inside class
-- @field [parent=#clazz] #table _funcs
    
---------------
-- the static functions
-- @field [parent=#clazz] #table _statics
            
---------------
-- the private instance functions inside class
-- @field [parent=#clazz] #table _privates
            
---------------
-- the constructor function
-- @field [parent=#clazz] #function _ctor
            
---------------
-- the class name
-- @field [parent=#clazz] #string _name
            
---------------
-- the singleton flag
-- @field [parent=#clazz] #boolean _singleton
            
---------------
-- the abstract flag
-- @field [parent=#clazz] #boolean _abstract

---------------
-- true if singleton is private (non-visible through api)
-- @field [parent=#clazz] #boolean _privateSingleton

---------------
-- the singleton instance
-- @field [parent=#clazz] #table _singletonInstance
            
---------------
-- the super class (extends)
-- @field [parent=#clazz] #clazz _super
            
---------------
-- the super class name (unresolved)
-- @field [parent=#clazz] #string _supername

---------------
-- defined flag
-- @field [parent=#clazz] #boolean _defined

---------------
-- the mixins added to this class
-- @field [parent=#clazz] #table _mixins
            
---------------
-- the friends allowing to query object privates
-- @field [parent=#clazz] #table _friends

---------------
-- user variables for class objects
-- @field [parent=#clazz] #table user

---------------
-- declare a singleton
-- @function [parent=#clazz] singleton
-- @param #boolean private true for non-visible singletons; defaults to false
-- @return #clazz self for chaining

---------------
-- declare class to be abstract; abstract classes cannot be instantiated directly
-- @function [parent=#clazz] abstract
-- @return #clazz self for chaining

---------------
-- abstract functions to be overriden by child classes
-- @function [parent=#clazz] aFunc
-- @param ... name of the functions to be abstract
-- @return #clazz self for chaining

---------------
-- declare constructor
-- @function [parent=#clazz] ctor
-- @param #function func
-- @return #clazz self for chaining
        
---------------
-- declare function
-- @function [parent=#clazz] func
-- @param #string name
-- @param #function func
-- @return #clazz self for chaining
        
---------------
-- declare private function located inside object privates
-- @function [parent=#clazz] pfunc
-- @param #string name
-- @param #function func
-- @return #clazz self for chaining
        
---------------
-- declare static function
-- @function [parent=#clazz] sfunc
-- @param #string name
-- @param #function func
-- @return #clazz self for chaining
        
---------------
-- declare private static variables in clazz type
-- @function [parent=#clazz] pstat
-- @param #string key
-- @param #any value
-- @return #clazz self for chaining
        
---------------
-- return private static variable
-- @function [parent=#clazz] getPstat
-- @param #string key
-- @return #table any private variable found in this clazz or in super classes

---------------
-- class inheritance (base classes)
-- @function [parent=#clazz] extends
-- @param #string name the class to extend
-- @return #clazz self for chaining

---------------
-- super method invocation; only valid within methods.
-- @function [parent=#clazz] super
-- @param ... the method arguments
-- @return #any super method return

---------------
-- Class inheritance (public class mixins).
-- Mixins are added to the private variables.
-- All public methods of mixins are merged to the main object by delegators.
-- If a method already exists it will not be merged.
-- Mixins can be initialized by direct initialization and setting inside constructors.
-- If a mixin is not initialized in ctor it will be created automatically with no arguments given to constructor.
-- @function [parent=#clazz] mixin
-- @param #string property property name for given mixin
-- @param #string mixin the mixin to add to this class
-- @return #clazz self for chaining

---------------
-- friend classes allowing to access THIS object privates through method privates.
-- @function [parent=#clazz] friends
-- @param ... one or multiple classes being allowed to access object privates
-- @return #clazz self for chaining

---------------
-- Receive object privates for given object; throws error if this class is not a friend of target class
-- @function [parent=#clazz] privates
-- @param #table object to query the privates
-- @return #table object privates

---------------
-- Adding a private mixin (annotation) to any other object; only accessible by getAnnot method
-- @function [parent=#clazz] annot
-- @param #table target the target object to add the annotation
-- @param #string name the class to instantiate
-- @param ... constructor arguments for annotation class
-- @return #table the instantiated mixin object as returned by method getAnnot

---------------
-- Returning a private mixin (annotation) added by annot
-- @function [parent=#clazz] getAnnot
-- @param #table target the target object to query the annotation from
-- @param #string name the class of the annotation
-- @return #table the annotation object

---------------
-- Clears a mixin (annotation)
-- @function [parent=#clazz] clearAnnot
-- @param #table target the target object to remove the annotation
-- @param #string name the class of the annotation
-- @return #table the (removed) annotation object

---------------
-- delegate functions directly to private object
-- @function [parent=#clazz] delegate
-- @param #string property private property
-- @param ... name of the functions to be delegated
-- @return #clazz self for chaining

return nil