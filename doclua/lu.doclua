--    Copyright Martin Eisengardt 2018 xworlds.eu
--    
--    This file is part of xwos.
--
--    xwos is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    xwos is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with xwos.  If not, see <http://www.gnu.org/licenses/>.

---------------
-- A unit testing framework
-- @module lu

---------------
-- luaunit version number
-- @field [parent=#lu] #string VERSION

---------------
-- luaunit version number
-- @field [parent=#lu] #string _VERSION

---------------
-- Assert that two values are equal.
-- For tables, the comparison is a deep comparison :
-- <ul><li>number of elements must be the same</li>
-- <li>tables must contain the same keys</li>
-- <li>each key must contain the same values. The values are also compared recursively with deep comparison.</li>
-- @function [parent=#lu] assertEquals
-- @param #any actual
-- @param #any expected

---------------
-- Assert that two values are different. The assertion fails if the two values are identical.
-- It also uses table deep comparison.
-- @function [parent=#lu] assertNotEquals
-- @param #any actual
-- @param #any expected

---------------
-- Assert that two floating point numbers are almost equal.
-- When comparing floating point numbers, strict equality does not work. Computer arithmetic is so that an operation that mathematically yields 1.00000000 might yield 0.999999999999 in lua . Thatâ€™s why you need an almost equals comparison, where you specify the error margin.
-- @function [parent=#lu] assertAlmostEquals
-- @param #number actual
-- @param #number expected
-- @param #number margin

---------------
-- Assert that two floating point numbers are not almost equal.
-- @function [parent=#lu] assertNotAlmostEquals
-- @param #number actual
-- @param #number expected
-- @param #number margin

---------------
-- Assert that a given value compares to true. Lua coercion rules are applied so that values like 0, "", 1.17 all compare to true.
-- @function [parent=#lu] assertTrue
-- @param #any value

---------------
-- Assert that a given value compares to false. Lua coercion rules are applied so that only nil and false all compare to false.
-- @function [parent=#lu] assertFalse
-- @param #any value

---------------
-- Assert that a given value is nil.
-- @function [parent=#lu] assertNil
-- @param #any value

---------------
-- Assert that a given value is not nil. Lua coercion rules are applied so that values like 0, "", false all validate the assertion.
-- @function [parent=#lu] assertNotNil
-- @param #any value

---------------
-- Assert that two variables are identical. For string, numbers, boolean and for nil, this gives the same result as assertEquals() . For the other types, identity means that the two variables refer to the same object.
-- @function [parent=#lu] assertIs
-- @param #any actual
-- @param #any expected

---------------
-- Assert that two variables are not identical, in the sense that they do not refer to the same value. See assertIs() for more details.
-- @function [parent=#lu] assertNotIs
-- @param #any actual
-- @param #any expected

---------------
-- Assert that a string contains the given substring or pattern.
-- By default, substring is searched in the string. If useRe is provided and is true, sub is treated as a pattern which is searched inside the string str.
-- @function [parent=#lu] assertStrContains
-- @param #string str
-- @param #string sub
-- @param #boolean useRe (optional)

---------------
-- Assert that a string contains the given substring, irrespective of the case. Not that unlike assertStrcontains(), you can not search for a pattern.
-- @function [parent=#lu] assertStrIContains
-- @param #string str
-- @param #string sub

---------------
-- Assert that a string does not contain a given substring or pattern.
-- By default, substring is searched in the string. If useRe is provided and is true, sub is treated as a pattern which is searched inside the string str .
-- @function [parent=#lu] assertNotStrContains
-- @param #string str
-- @param #string sub
-- @param #boolean useRe (optional)

---------------
-- Assert that a string does not contain the given substring, irrespective of the case.
-- Not that unlike assertNotStrcontains(), you can not search for a pattern.
-- @function [parent=#lu] assertNotStrIContains
-- @param #string str
-- @param #string sub

---------------
-- Assert that a string matches the full pattern pattern.
-- If start and final are not provided or are nil, the pattern must match the full string, from start to end. The functions allows to specify the expected start and end position of the pattern in the string.
-- @function [parent=#lu] assertStrMatches
-- @param #string str
-- @param #string pattern
-- @param #number start (optional)
-- @param #number final (optional)

---------------
-- Assert that calling functions func with the arguments yields an error. If the function does not yield an error, the assertion fails.
-- Note that the error message itself is not checked, which means that this function does not distinguish between the legitimate error that you expect and another error that might be triggered by mistake.
-- @function [parent=#lu] assertError
-- @param #function func
-- @param ... function arguments

---------------
-- Assert that calling function func will generate exactly the given error message. If the function does not yield an error, or if the error message is not identical, the assertion fails.
-- Be careful when using this function that error messages usually contain the file name and line number information of where the error was generated. This is usually inconvenient. To ignore the filename and line number information, you can either use a pattern with assertErrorMsgMatches() or simply check for the message containt with assertErrorMsgContains() .
-- @function [parent=#lu] assertErrorMsgEquals
-- @param #string expectedMsg
-- @param #function func
-- @param ... function arguments

---------------
-- Assert that calling function func will generate an error message containing partialMsg . If the function does not yield an error, or if the expected message is not contained in the error message, the assertion fails.
-- @function [parent=#lu] assertErrorMsgContains
-- @param #string partialMsg
-- @param #function func
-- @param ... function arguments

---------------
-- Assert that calling function func will generate an error message matching expectedPattern . If the function does not yield an error, or if the error message does not match the provided patternm the assertion fails.
-- Note that matching is done from the start to the end of the error message. Be sure to escape magic all magic characters with % (like -+.?*) .
-- @function [parent=#lu] assertErrorMsgMatches
-- @param #string expectedPattern
-- @param #function func
-- @param ... function arguments

---------------
-- Assert that the argument is a number (integer or float)
-- @function [parent=#lu] assertIsNumber
-- @param #any value

---------------
-- Assert that the argument is a string.
-- @function [parent=#lu] assertIsString
-- @param #any value

---------------
-- Assert that the argument is a table.
-- @function [parent=#lu] assertIsTable
-- @param #any value

---------------
-- Assert that the argument is a boolean.
-- @function [parent=#lu] assertIsBoolean
-- @param #any value

---------------
-- Assert that the argument is a nil.
-- @function [parent=#lu] assertIsNil
-- @param #any value

---------------
-- Assert that the argument is a function.
-- @function [parent=#lu] assertIsFunction
-- @param #any value

---------------
-- Assert that the argument is a userdata.
-- @function [parent=#lu] assertIsUserdata
-- @param #any value

---------------
-- Assert that the argument is a coroutine (an object with type thread ).
-- @function [parent=#lu] assertIsCoroutine
-- @param #any value

---------------
-- Fail test
-- @function [parent=#lu] fail
-- @param #string msg

---------------
-- Fail test
-- @function [parent=#lu] failIf
-- @param #boolean condition
-- @param #string msg

---------------
-- Success test
-- @function [parent=#lu] success

---------------
-- Success test
-- @function [parent=#lu] successIf
-- @param #boolean condition

---------------
-- Assert that two tables contain the same items, irrespective of their keys.
-- This function is practical for example if you want to compare two lists but where items are not in the same order:
-- <pre>luaunit.assertItemsEquals( {1,2,3}, {3,2,1} ) -- assertion succeeds</pre>
-- The comparison is not recursive on the items: if any of the items are tables, they are compared using table equality (like as in assertEquals() ), where the key matters.
-- <pre>luaunit.assertItemsEquals( {1,{2,3},4}, {4,{3,2,},1} ) -- assertion fails because {2,3} ~= {3,2}</pre>
-- @function [parent=#lu] assertItemsEquals
-- @param #table actual
-- @param #table expected

return nil